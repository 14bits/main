// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Chat_AttachmentType int32

const (
	Chat_NONE        Chat_AttachmentType = 0
	Chat_IMAGE       Chat_AttachmentType = 1
	Chat_FILE        Chat_AttachmentType = 2
	Chat_VIDEO       Chat_AttachmentType = 3
	Chat_GEOLOCATION Chat_AttachmentType = 4
	Chat_CALENDER    Chat_AttachmentType = 5
)

var Chat_AttachmentType_name = map[int32]string{
	0: "NONE",
	1: "IMAGE",
	2: "FILE",
	3: "VIDEO",
	4: "GEOLOCATION",
	5: "CALENDER",
}

var Chat_AttachmentType_value = map[string]int32{
	"NONE":        0,
	"IMAGE":       1,
	"FILE":        2,
	"VIDEO":       3,
	"GEOLOCATION": 4,
	"CALENDER":    5,
}

func (x Chat_AttachmentType) String() string {
	return proto.EnumName(Chat_AttachmentType_name, int32(x))
}

func (Chat_AttachmentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{0, 0}
}

// Chat is response for ChatService.Subscribe method
type Chat struct {
	// message body
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text                 string               `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Uid                  string               `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	AttachmentType       Chat_AttachmentType  `protobuf:"varint,5,opt,name=attachmentType,proto3,enum=v1.Chat_AttachmentType" json:"attachmentType,omitempty"`
	AttachmentUrl        string               `protobuf:"bytes,6,opt,name=attachmentUrl,proto3" json:"attachmentUrl,omitempty"`
	ConversationsId      string               `protobuf:"bytes,7,opt,name=conversationsId,proto3" json:"conversationsId,omitempty"`
	Testcrap             string               `protobuf:"bytes,8,opt,name=testcrap,proto3" json:"testcrap,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Chat) Reset()         { *m = Chat{} }
func (m *Chat) String() string { return proto.CompactTextString(m) }
func (*Chat) ProtoMessage()    {}
func (*Chat) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{0}
}

func (m *Chat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chat.Unmarshal(m, b)
}
func (m *Chat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chat.Marshal(b, m, deterministic)
}
func (m *Chat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chat.Merge(m, src)
}
func (m *Chat) XXX_Size() int {
	return xxx_messageInfo_Chat.Size(m)
}
func (m *Chat) XXX_DiscardUnknown() {
	xxx_messageInfo_Chat.DiscardUnknown(m)
}

var xxx_messageInfo_Chat proto.InternalMessageInfo

func (m *Chat) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Chat) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Chat) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Chat) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Chat) GetAttachmentType() Chat_AttachmentType {
	if m != nil {
		return m.AttachmentType
	}
	return Chat_NONE
}

func (m *Chat) GetAttachmentUrl() string {
	if m != nil {
		return m.AttachmentUrl
	}
	return ""
}

func (m *Chat) GetConversationsId() string {
	if m != nil {
		return m.ConversationsId
	}
	return ""
}

func (m *Chat) GetTestcrap() string {
	if m != nil {
		return m.Testcrap
	}
	return ""
}

func init() {
	proto.RegisterEnum("v1.Chat_AttachmentType", Chat_AttachmentType_name, Chat_AttachmentType_value)
	proto.RegisterType((*Chat)(nil), "v1.Chat")
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_8c585a45e2093e54) }

var fileDescriptor_8c585a45e2093e54 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x8f, 0x93, 0x40,
	0x14, 0xc7, 0x0b, 0xa5, 0x2b, 0x7d, 0x55, 0x96, 0xbc, 0x83, 0x4e, 0xf0, 0x60, 0x43, 0x3c, 0x10,
	0x0f, 0xac, 0xad, 0x17, 0x6f, 0x86, 0x74, 0xc7, 0x0d, 0x49, 0x85, 0x84, 0x56, 0x13, 0x8f, 0x03,
	0x8c, 0x5b, 0x92, 0xf2, 0x23, 0xf0, 0x4a, 0xdc, 0x7f, 0xde, 0x18, 0xa6, 0xe9, 0x36, 0xad, 0xf1,
	0xf6, 0xe6, 0xf3, 0x3e, 0x99, 0xf7, 0x9d, 0x37, 0x00, 0xd9, 0x4e, 0x90, 0xdf, 0xb4, 0x35, 0xd5,
	0xa8, 0xf7, 0x0b, 0xe7, 0xed, 0x63, 0x5d, 0x3f, 0xee, 0xe5, 0x9d, 0x22, 0xe9, 0xe1, 0xd7, 0x9d,
	0x2c, 0x1b, 0x7a, 0x3a, 0x0a, 0xce, 0xbb, 0xeb, 0x26, 0x15, 0xa5, 0xec, 0x48, 0x94, 0xcd, 0x51,
	0x70, 0xff, 0xe8, 0x60, 0xac, 0x76, 0x82, 0xd0, 0x02, 0xbd, 0xc8, 0x99, 0x36, 0xd7, 0xbc, 0x69,
	0xa2, 0x17, 0x39, 0x22, 0x18, 0x24, 0x7f, 0x13, 0xd3, 0x15, 0x51, 0x35, 0xda, 0x30, 0x3e, 0x14,
	0x39, 0x1b, 0x2b, 0x34, 0x94, 0xf8, 0x19, 0xa6, 0x59, 0x2b, 0x05, 0xc9, 0x3c, 0x20, 0x66, 0xcc,
	0x35, 0x6f, 0xb6, 0x74, 0xfc, 0xe3, 0x4c, 0xff, 0x34, 0xd3, 0xdf, 0x9e, 0x66, 0x26, 0x67, 0x19,
	0xbf, 0x80, 0x25, 0x88, 0x44, 0xb6, 0x2b, 0x65, 0x45, 0xdb, 0xa7, 0x46, 0xb2, 0xc9, 0x5c, 0xf3,
	0xac, 0xe5, 0x1b, 0xbf, 0x5f, 0xf8, 0x43, 0x22, 0x3f, 0xb8, 0x68, 0x27, 0x57, 0x3a, 0xbe, 0x87,
	0x57, 0x67, 0xf2, 0xbd, 0xdd, 0xb3, 0x1b, 0x15, 0xeb, 0x12, 0xa2, 0x07, 0xb7, 0x59, 0x5d, 0xf5,
	0xb2, 0xed, 0x04, 0x15, 0x75, 0xd5, 0x85, 0x39, 0x7b, 0xa1, 0xbc, 0x6b, 0x8c, 0x0e, 0x98, 0x24,
	0x3b, 0xca, 0x5a, 0xd1, 0x30, 0x53, 0x29, 0xcf, 0x67, 0xf7, 0x27, 0x58, 0x97, 0x69, 0xd0, 0x04,
	0x23, 0x8a, 0x23, 0x6e, 0x8f, 0x70, 0x0a, 0x93, 0xf0, 0x5b, 0xf0, 0xc0, 0x6d, 0x6d, 0x80, 0x5f,
	0xc3, 0x35, 0xb7, 0xf5, 0x01, 0xfe, 0x08, 0xef, 0x79, 0x6c, 0x8f, 0xf1, 0x16, 0x66, 0x0f, 0x3c,
	0x5e, 0xc7, 0xab, 0x60, 0x1b, 0xc6, 0x91, 0x6d, 0xe0, 0x4b, 0x30, 0x57, 0xc1, 0x9a, 0x47, 0xf7,
	0x3c, 0xb1, 0x27, 0xcb, 0x3d, 0xcc, 0x86, 0xd7, 0x6e, 0x64, 0xdb, 0x17, 0x99, 0xc4, 0x0f, 0x60,
	0x6c, 0x64, 0x95, 0xa3, 0x79, 0x5a, 0x83, 0xf3, 0xfa, 0x9f, 0x7d, 0xf2, 0xe1, 0x83, 0xdd, 0x11,
	0x2e, 0x60, 0xba, 0x39, 0xa4, 0x5d, 0xd6, 0x16, 0xa9, 0xc4, 0xff, 0x68, 0xce, 0xf3, 0x45, 0xee,
	0xe8, 0xa3, 0x96, 0xde, 0xa8, 0xee, 0xa7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x25, 0x4b, 0x96,
	0x69, 0x45, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	// Send sends message to the server
	Send(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*empty.Empty, error)
	// Subscribe is streaming method to get echo messages from the server
	Subscribe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ChatService_SubscribeClient, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Send(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ChatService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Subscribe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ChatService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[0], "/v1.ChatService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_SubscribeClient interface {
	Recv() (*Chat, error)
	grpc.ClientStream
}

type chatServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *chatServiceSubscribeClient) Recv() (*Chat, error) {
	m := new(Chat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	// Send sends message to the server
	Send(context.Context, *Chat) (*empty.Empty, error)
	// Subscribe is streaming method to get echo messages from the server
	Subscribe(*empty.Empty, ChatService_SubscribeServer) error
}

// UnimplementedChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (*UnimplementedChatServiceServer) Send(ctx context.Context, req *Chat) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedChatServiceServer) Subscribe(req *empty.Empty, srv ChatService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ChatService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Send(ctx, req.(*Chat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).Subscribe(m, &chatServiceSubscribeServer{stream})
}

type ChatService_SubscribeServer interface {
	Send(*Chat) error
	grpc.ServerStream
}

type chatServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *chatServiceSubscribeServer) Send(m *Chat) error {
	return x.ServerStream.SendMsg(m)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _ChatService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ChatService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat.proto",
}
